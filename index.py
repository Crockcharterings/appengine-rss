#!/usr/bin/env pythonfrom google.appengine.ext import webappfrom google.appengine.ext.webapp import util, templateimport modelsimport datetimeimport jsonfrom google.appengine.api import urlfetchfrom xml.etree import ElementTree # XML parsing# Model -> JSON coder (http://stackoverflow.com/questions/1531501/json-serialization-of-google-app-engine-models)import timeSIMPLE_TYPES = (int, long, float, bool, dict, basestring, list)def toJSON(model):    output = {}    for key, prop in model.properties().iteritems():        value = getattr(model, key)        if value is None or isinstance(value, SIMPLE_TYPES):            output[key] = value        elif isinstance(value, datetime.date):            # Convert date/datetime to MILLISECONDS-since-epoch (JS "new Date()").            ms = time.mktime(value.utctimetuple()) * 1000            ms += getattr(value, 'microseconds', 0) / 1000            output[key] = int(ms)        elif isinstance(value, db.GeoPt):            output[key] = {'lat': value.lat, 'lon': value.lon}        elif isinstance(value, db.Model):            output[key] = to_dict(value)        else:            raise ValueError('cannot encode ' + repr(prop))    return outputdef get_user_id(u):    user = models.User.all()    user.filter("name = ", u)    return user.get().key().id()class home(webapp.RequestHandler):    def get(self):        args = {"param":[]}        self.response.out.write(template.render("index.html", args))    def post(self):        self.get()class feeds(webapp.RequestHandler):    def get(self):        r = models.Reading.all()        u = get_user_id(self.request.get('u'))        r.filter('user = ', u)        self.response.out.write(json.dumps({"feeds":[dict(toJSON(models.Feed.get_by_id(a.feed)).items() + {'id': a.feed}.items()) for a in r]}))    def post(self):        self.get()class reading_list(webapp.RequestHandler):    def get(self):        unread = models.Unread.all()        u = get_user_id(self.request.get('u'))        feed = self.request.get('feed')        feed = int(feed) if feed != 'all' else feed        unread.filter('user = ', u)        articles = sorted([models.Article.get_by_id(u.article) for u in unread], key = lambda a: a.date)        articles = [a.key().id() for a in articles if feed == 'all' or a.feed == feed] # filter by feed        self.response.out.write(json.dumps({"articles":articles}))    def post(self):        self.get()class article(webapp.RequestHandler):    def get(self):        a = models.Article.get_by_id(int(self.request.get('article')))        self.response.out.write(json.dumps({"article":toJSON(a)}))    def post(self):        self.get()class read(webapp.RequestHandler):    def get(self):        ur = models.Unread.all()        u = get_user_id(self.request.get('u'))        ur.filter('user = ', u)        ur.filter('article = ', int(self.request.get('aid')))        ur.get().delete()        self.response.out.write("Success")    def post(self):        self.get()class unread(webapp.RequestHandler):    def get(self):        u = get_user_id(self.request.get('u'))        ur = models.Unread(user = u, article = self.request.get('article'))        ur.put()        self.response.out.write("Success")    def post(self):        self.get()class add(webapp.RequestHandler):    def get(self):        feed_url = self.request.get('feed')        feeds = models.Feed.all()        feeds.filter('url = ', feed_url)        feed = feeds.get()        if not feed:            result = urlfetch.fetch(feed_url)            if result.status_code != 200:                raise Exception("Failed to fetch feed URL: " + feed.url)            rss = ElementTree.fromstring(result.content)            channel = rss.find("channel")            feed = models.Feed(url = feed_url,                title = channel.find("title").text,                description = channel.find("description").text,                language = channel.find("language").text)        feed.put()        u = get_user_id(self.request.get('u'))        r = models.Reading(user = u, feed = feed.key().id())        r.put()        self.response.out.write("Success")    def post(self):        self.get()class remove(webapp.RequestHandler):    def get(self):        r = models.Reading.all()        u = get_user_id(self.request.get('u'))        r.filter('user = ', u)        r.filter('feed = ', self.request.get('feed'))        r.get().delete()        self.response.out.write("Success")    def post(self):        self.get()class new_user(webapp.RequestHandler):    def get(self):        name = self.request.get('name')        u = models.User(name = name)        u.put()        self.response.out.write("Success")    def post(self):        self.get()def main():    app = webapp.WSGIApplication([("/", home),                                  ("/feeds", feeds),                                  ("/list", reading_list),                                  ("/article", article),                                  ("/read", read),                                  ("/unread", unread),                                  ("/add", add),                                  ("/remove", remove),                                  ("/new_user", new_user)                                 ])    util.run_wsgi_app(app)if __name__ == "__main__":    main()
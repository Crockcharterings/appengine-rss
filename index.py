#!/usr/bin/env pythonfrom google.appengine.ext import webappfrom google.appengine.ext.webapp import util, templateimport modelsimport datetimeimport jsonfrom google.appengine.api import urlfetchfrom xml.etree import ElementTree # XML parsingUSERNAME = "jeremy"def get_user_id(u):    user = models.User.get_by_properties({"name": u})    return user.key().id()class home(webapp.RequestHandler):    def get(self):        args = {"user":USERNAME}        self.response.out.write(template.render("index.html", args))    def post(self):        self.get()class feeds(webapp.RequestHandler):    def get(self):        r = models.Reading.all()        u = get_user_id(self.request.get('u'))        r.filter('user = ', u)        self.response.out.write(json.dumps({"feeds":[models.Feed.get_by_id(a.feed).json() for a in r]}))    def post(self):        self.get()class reading_list(webapp.RequestHandler):    def get(self):        unread = models.Unread.all()        u = get_user_id(self.request.get('u'))        feed = self.request.get('feed')        feed = int(feed) if feed != 'all' else feed        unread.filter('user = ', u)        articles = sorted([models.Article.get_by_id(u.article) for u in unread], key = lambda a: a.date)        articles = [a.key().id() for a in articles if feed == 'all' or a.feed == feed] # filter by feed        self.response.out.write(json.dumps({"articles":articles}))    def post(self):        self.get()class unread(webapp.RequestHandler):    def get(self):        unread = models.Unread.all()        u = get_user_id(self.request.get('u'))        unread.filter('user = ', u)        counts = {}        for u in unread:            a = models.Article.get_by_id(u.article)            counts[a.feed] = counts.get(a.feed, 0) + 1        for key in counts.keys():            f = models.Feed.get_by_id(key).title            counts[f] = counts[key]            del counts[key]        self.response.out.write(json.dumps({"counts":counts}))    def post(self):        self.get()class article(webapp.RequestHandler):    def get(self):        a = models.Article.get_by_id(int(self.request.get('article')))        self.response.out.write(json.dumps({"article":a.json()}))    def post(self):        self.get()class read(webapp.RequestHandler):    def get(self):        u = get_user_id(self.request.get('u'))        a = int(self.request.get('article'))        ur = models.Unread.get_by_properties({"user": u, "article": a})        if ur != None:          ur.delete()        self.response.out.write("Success")    def post(self):        self.get()# if the feed already exists and/or the user is already reading it, this# returns the feed object as though nothing unusual happenedclass add(webapp.RequestHandler):    def get(self):        feed_url = self.request.get('feed')        feed = models.Feed.get_by_properties({"url": feed_url})        if feed == None:            result = urlfetch.fetch(feed_url)            if result.status_code != 200:                raise Exception("Failed to fetch feed URL: " + feed.url)            # some elements may have a namespace prefix like {http://www.w3.org/2005/Atom}            root = ElementTree.fromstring(result.content)            if root.tag == "rss":              channel = root.find("channel")              feed = models.Feed(url = feed_url,                  title = channel.find("title").text,                  description = channel.find("description").text,                  language = (channel.find("language").text if channel.find("language") is not None else None), # not required                  link = channel.find("link").text)            else:              namespace = '{http://www.w3.org/2005/Atom}'              if root.tag == namespace+"feed":                atom = root                feed = models.Feed(url = feed_url,                    title = atom.find(namespace+"title").text,                    link = atom.find(namespace+"link").get("href"))            # check again to make sure we don't already have this feed            matching_feed = models.Feed.get_by_properties({"link": feed.link})            if matching_feed == None:              feed.put()            else:              feed = matching_feed        u = get_user_id(self.request.get('u'))        already_reading = models.Reading.get_by_properties({"user": u, "feed": feed.key().id()})        if not already_reading:          r = models.Reading(user = u, feed = feed.key().id())          r.put()        self.response.out.write(json.dumps(feed.json()))    def post(self):        self.get()class remove(webapp.RequestHandler):    def get(self):        u = get_user_id(self.request.get('u'))        r = models.Reading.get_by_properties({"user": u, "feed": int(self.request.get("feed"))})        if r != None:            #r.delete()            self.response.out.write("Success")        else:            self.response.out.write("Error: No such feed")    def post(self):        self.get()class new_user(webapp.RequestHandler):    def get(self):        name = self.request.get('name')        u = models.User.get_by_properties({"name": name})        if u != None:            u = models.User(name = name)            u.put()            self.response.out.write("Success")        else:            self.response.out.write("Taken")    def post(self):        self.get()class star(webapp.RequestHandler):    def get(self):        u = get_user_id(self.request.get('u'))        a = int(self.request.get('article'))        if models.Star.get_by_properties({"user": u, "article": a}) == None:            s = models.Star(user = u, article = a)            s.put()        self.response.out.write("Success")    def post(self):        self.get()class unstar(webapp.RequestHandler):    def get(self):        u = get_user_id(self.request.get('u'))        a = int(self.request.get('article'))        s = models.Star.get_by_properties({"user": u, "article": a})        if s != None:            s.delete()        self.response.out.write("Success")    def post(self):        self.get()class starred(webapp.RequestHandler):    def get(self):      u = get_user_id(self.request.get('u'))      stars = models.Star.all()      stars.filter("user", u)      articles = sorted([models.Article.get_by_id(s.article) for s in stars], key = lambda a: a.date)      articles = [a.key().id() for a in articles] # filter by feed      self.response.out.write(json.dumps({"articles":articles}))    def post(self):      self.get()class manage_feeds(webapp.RequestHandler):    def get(self):        args = {"user":USERNAME}        self.response.out.write(template.render("feeds.html", args))    def post(self):        self.get()def main():    app = webapp.WSGIApplication([("/", home),                                  ("/feeds", feeds),                                  ("/list", reading_list),                                  ("/article", article),                                  ("/read", read),                                  ("/add", add),                                  ("/remove", remove),                                  ("/unread", unread),                                  ("/star", star),                                  ("/starred", starred),                                  ("/new_user", new_user),                                  ("/manage_feeds", manage_feeds)                                 ])    util.run_wsgi_app(app)if __name__ == "__main__":    main()